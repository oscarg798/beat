<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/materialize.min.css">
    <!--STYLES END-->
  </head>

  <body ng-app="AppModule">
    <nav>
   <div class="nav-wrapper">
     <a href="#" class="brand-logo">Beat</a>
     <ul id="nav-mobile" class="right hide-on-med-and-down">
       <li><a href="sass.html">Pollas</a></li>
       <li><a href="badges.html">Components</a></li>
       <li><a href="collapsible.html">JavaScript</a></li>
     </ul>
   </div>
 </nav>
   <div ng-view></div>
  



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.min.js"></script>
    <script src="/js/dependencies/angular-route.min.js"></script>
    <script src="/js/dependencies/jquery-1.12.2.min.js"></script>
    <script src="/js/dependencies/materialize.min.js"></script>
    <script src="/js/public/common/app.module.js"></script>
    <script src="/js/public/common/messages.provider.js"></script>
    <script src="/js/public/match/match.module.js"></script>
    <script src="/js/public/user/user.module.js"></script>
    <script src="/js/public/team/team.factory.js"></script>
    <script src="/js/public/user/user.factory.js"></script>
    <script src="/js/public/match/match.controller.js"></script>
    <script src="/js/public/team/newTeam.controller.js"></script>
    <script src="/js/public/team/showTeam.controller.js"></script>
    <script src="/js/public/user/user.controller.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
